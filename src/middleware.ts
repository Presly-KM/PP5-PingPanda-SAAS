import { clerkMiddleware } from '@clerk/nextjs/server';

export default clerkMiddleware();

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',  // Ici on utilise une expression régulière pour matcher tous les chemins sauf ceux qui commencent par _next (les fichiers internes de Next.js) et les fichiers statiques (html, css, js, jpeg, webp, png, gif, svg, ttf, woff2, ico, csv, docx, xlsx, zip et webmanifest). Cela permet d'exclure ces fichiers du middleware Clerk. L'utilité de cette ligne est de s'assurer que le middleware Clerk ne s'applique pas aux fichiers internes de Next.js et aux fichiers statiques, sauf s'ils sont spécifiés dans les paramètres de recherche (query parameters). Cela permet d'optimiser les performances en évitant d'appliquer le middleware à des ressources qui n'ont pas besoin d'être protégées par l'authentification Clerk. Par exemple, les fichiers statiques comme les images, les feuilles de style et les scripts JavaScript n'ont pas besoin d'être protégés par l'authentification, car ils sont généralement accessibles à tous les utilisateurs. En excluant ces fichiers du middleware Clerk, on évite des vérifications d'authentification inutiles pour ces ressources, ce qui améliore les performances de l'application. De plus, cela permet de réduire la charge sur le serveur en évitant des requêtes d'authentification pour des ressources statiques qui n'ont pas besoin d'être sécurisées. Les ressources statiques se définissent par des fichiers qui sont servis directement par le serveur sans nécessiter de traitement côté serveur, comme les images, les feuilles de style CSS et les scripts JavaScript. 
    // Always run for API routes
    '/(api|trpc)(.*)',                                  // Ici on utilise une expression régulière pour matcher tous les chemins qui commencent par /api ou /trpc. Cela signifie que le middleware Clerk s'appliquera à toutes les routes d'API et de RPC (Remote Procedure Call) de l'application. L'utilité de cette ligne est de s'assurer que le middleware Clerk est appliqué aux routes d'API et de RPC, ce qui permet de protéger ces routes avec l'authentification Clerk. Par exemple, si une route d'API nécessite une authentification pour accéder aux données, le middleware Clerk vérifiera si l'utilisateur est authentifié avant de permettre l'accès à cette route. Cela garantit que seules les utilisateurs authentifiés peuvent accéder aux données sensibles ou effectuer des actions protégées via les routes d'API et de RPC.
  ],
};