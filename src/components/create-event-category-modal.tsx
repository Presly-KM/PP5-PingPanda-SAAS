"use client"

import { useQueryClient } from "@tanstack/react-query"
import { useState, PropsWithChildren } from "react"
import { useForm } from "react-hook-form"                                     // Le hook useForm est utilis√© pour g√©rer les formulaires dans React. Il fournit des m√©thodes pour enregistrer les champs du formulaire, valider les donn√©es et g√©rer l'√©tat du formulaire.
import { zodResolver } from "@hookform/resolvers/zod"                         // ZodResolver est un r√©solveur pour React Hook Form qui permet d'utiliser Zod pour la validation des sch√©mas de formulaire. En effet, il permet de valider les donn√©es du formulaire en utilisant des sch√©mas d√©finis avec Zod.
import { z } from "zod"                                                       // Zod est une biblioth√®que de validation de sch√©mas pour JavaScript et TypeScript. Elle est utilis√©e pour d√©finir des sch√©mas de validation pour les donn√©es, ce qui permet de s'assurer que les donn√©es respectent certaines r√®gles avant d'√™tre utilis√©es dans l'application.
import { CATEGORY_NAME_VALIDATOR } from "@/lib/validators/category-validator"
import { Modal } from "@/components/ui/modal"                               // Le composant Modal est utilis√© pour afficher une fen√™tre modale, qui est une fen√™tre superpos√©e √† l'interface utilisateur principale. Elle est souvent utilis√©e pour afficher des informations suppl√©mentaires ou pour demander une action √† l'utilisateur.
import { Label } from "@/components/ui/label"                               // Le composant Label est utilis√© pour √©tiqueter les champs de formulaire. Il am√©liore l'accessibilit√© et l'exp√©rience utilisateur en fournissant des descriptions claires des champs.
import { Input } from "@/components/ui/input"                               // Le composant Input est utilis√© pour cr√©er des champs de saisie dans les formulaires. Il permet √† l'utilisateur de saisir des donn√©es, comme du texte ou des nombres.
import { cn } from "@/utils"                                               // La fonction cn est utilis√©e pour combiner des classes CSS conditionnelles. Elle permet de g√©rer dynamiquement les classes CSS en fonction de l'√©tat ou des propri√©t√©s du composant.
import { Button } from "@/components/ui/button"                             // Le composant Button est utilis√© pour cr√©er des boutons interactifs dans l'interface utilisateur. Il permet √† l'utilisateur de d√©clencher des actions, comme soumettre un formulaire ou ouvrir une modale.
import { useMutation } from "@tanstack/react-query"                       // Le hook useMutation est utilis√© pour effectuer des mutations de donn√©es, comme la cr√©ation, la mise √† jour ou la suppression d'√©l√©ments. Il est souvent utilis√© pour envoyer des donn√©es au serveur et mettre √† jour l'√©tat de l'application en cons√©quence.
import { client } from "@/lib/client"                                   // Le client TRPC est utilis√© pour interagir avec le serveur TRPC. Il permet d'envoyer des requ√™tes et de recevoir des r√©ponses du serveur, facilitant ainsi la communication entre le client et le serveur.

const EVENT_CATEGORY_VALIDATOR = z.object({
    name: CATEGORY_NAME_VALIDATOR, // Le sch√©ma de validation pour une cat√©gorie d'√©v√©nement. Il s'assure que le nom de la cat√©gorie n'est pas vide, qu'il contient au moins un caract√®re, et qu'il ne contient que des lettres, des chiffres et des tirets.
    color: z
    .string()
    .min(1, "Color is required.")
    .regex(/^#[0-9A-F]{6}$/i, "Invalid color format."), // Le sch√©ma de validation pour la couleur d'une cat√©gorie
    emoji: z.string().emoji("Invalid emoji").optional(), // Le sch√©ma de validation pour l'emoji d'une cat√©gorie
})

type EventCategoryForm = z.infer<typeof EVENT_CATEGORY_VALIDATOR> // Le type EventCategoryForm est d√©riv√© du sch√©ma de validation EVENT_CATEGORY_VALIDATOR. Il repr√©sente la forme des donn√©es d'une cat√©gorie d'√©v√©nement, avec les propri√©t√©s name, color et emoji.

const COLOR_OPTIONS = [                                             // Les options de couleur pr√©d√©finies pour les cat√©gories d'√©v√©nements. Elles sont utilis√©es pour permettre √† l'utilisateur de choisir une couleur pour la cat√©gorie. Tailwind CSS ici va utiliser les classes de couleur pour styliser les boutons de couleur.
"#FF6B6B", // bg-[#FF6B6B] ring-[#FF6B6B] Bright Red
"#4ECDC4", // bg-[#4ECDC4] ring-[#4ECDC4] Teal
"#45B7D1", // bg-[#45B7D1] ring-[#45B7D1] Sky Blue
"#FFA07A", // bg-[#FFA07A] ring-[#FFA07A] Light Salmon
"#98D8C8", // bg-[#98D8C8] ring-[#98D8C8] Seafoam Green
"#FDCB6E", // bg-[#FDCB6E] ring-[#FDCB6E] Mustard Yellow
"#6C5CE7", // bg-[#6C5CE7] ring-[#6C5CE7] Soft Purple
"#FF85A2", // bg-[#FF85A2] ring-[#FF85A2] Pink
"#2ECC71", // bg-[#2ECC71] ring-[#2ECC71] Emerald Green
"#E17055", // bg-[#E17055] ring-[#E17055] Terracotta
]

const EMOJI_OPTIONS = [                                             // Les options d'emoji pr√©d√©finies pour les cat√©gories d'√©v√©nements. Elles sont utilis√©es pour permettre √† l'utilisateur de choisir un emoji pour la cat√©gorie.
{ emoji: "üí∞", label: "Money (Sale)" },
{ emoji: "üë§", label: "User (Sign-up)" },
{ emoji: "üéâ", label: "Celebration" },
{ emoji: "üìÖ", label: "Calendar" },
{ emoji: "üöÄ", label: "Launch" },
{ emoji: "üì¢", label: "Announcement" },
{ emoji: "üéì", label: "Graduation" },
{ emoji: "üèÜ", label: "Achievement" },
{ emoji: "üí°", label: "Idea" },
{ emoji: "üîî", label: "Notification" },
]

interface CreateEventCategoryModal extends PropsWithChildren {  // Le composant CreateEventCategoryModal est utilis√© pour cr√©er une nouvelle cat√©gorie d'√©v√©nement. Il utilise le hook useState pour g√©rer l'√©tat d'ouverture du modal et le hook useForm pour g√©rer le formulaire de cr√©ation de cat√©gorie.
    containerClassName?: string // La classe CSS optionnelle pour le conteneur du modal. Elle permet de personnaliser le style du conteneur du modal, par exemple en ajoutant des marges ou des bordures.
}

export const CreateEventCategoryModal = ({ children, containerClassName,} : CreateEventCategoryModal) => {  // Le composant CreateEventCategoryModal prend en charge les enfants (children) qui seront affich√©s dans le conteneur du modal, ainsi qu'une classe CSS optionnelle pour le conteneur.
    const [isOpen, setIsOpen] = useState(false)                                  // Le hook useState est utilis√© pour g√©rer l'√©tat d'ouverture du modal. Il initialise isOpen √† false, ce qui signifie que le modal est ferm√© par d√©faut.
    const queryClient = useQueryClient()                                         // Le hook useQueryClient est utilis√© pour acc√©der au client de requ√™te, qui permet d'interagir avec le cache des requ√™tes et de d√©clencher des mises √† jour.

    const {mutate: createEventCategory, isPending } = useMutation({
        mutationFn: async (data: EventCategoryForm) => {
           await client.category.createEventCategory.$post(data)
        },
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ["user-event-categories"] }) // La fonction onSuccess est appel√©e lorsque la mutation r√©ussit. Elle invalide la requ√™te "user-event-categories" pour forcer une nouvelle r√©cup√©ration des donn√©es, garantissant ainsi que l'interface utilisateur affiche les donn√©es les plus r√©centes.
            setIsOpen(false)  // Elle ferme le modal apr√®s la cr√©ation r√©ussie de la cat√©gorie d'√©v√©nement. 
        }
    })
            
    const { register, handleSubmit, watch, setValue, formState:{errors}, } = useForm<EventCategoryForm>({ // Le hook useForm est utilis√© pour g√©rer le formulaire de cr√©ation de cat√©gorie d'√©v√©nement. Il utilise le sch√©ma de validation EVENT_CATEGORY_VALIDATOR pour valider les donn√©es du formulaire. register est utilis√© pour enregistrer les champs du formulaire, handleSubmit est utilis√© pour g√©rer la soumission du formulaire, et formState.errors est utilis√© pour acc√©der aux erreurs de validation. formState errors contient les erreurs de validation pour chaque champ du formulaire, ainsi, si une erreur de validation se produit, elle sera affich√©e sous le champ correspondant.
        resolver: zodResolver(EVENT_CATEGORY_VALIDATOR),
    })

    const color = watch("color") // Le hook watch est utilis√© pour surveiller les changements dans le champ "color" du formulaire. Il permet de r√©cup√©rer la valeur actuelle de la couleur s√©lectionn√©e par l'utilisateur.
    const selectedEmoji = watch("emoji") // Le hook watch est utilis√© pour surveiller les changements dans le champ "emoji" du formulaire. Il permet de r√©cup√©rer la valeur actuelle de l'emoji s√©lectionn√© par l'utilisateur.
    
    const onSubmit = (data: EventCategoryForm) => {
         createEventCategory(data) // La fonction onSubmit est appel√©e lorsque le formulaire est soumis. Elle utilise la fonction createEventCategory pour cr√©er une nouvelle cat√©gorie d'√©v√©nement avec les donn√©es du formulaire.
    }

    return (
    <> 
    <div className={containerClassName} onClick={() => setIsOpen(true)}>  {/* Le conteneur du modal est utilis√© pour afficher le bouton ou le lien qui ouvre le modal. Il utilise la classe CSS optionnelle containerClassName pour personnaliser son style. Lorsqu'on clique sur ce conteneur, il appelle setIsOpen(true) pour ouvrir le modal. */}
        {children}
    </div>

    <Modal className="max-w-xl p-8" 
           showModal={isOpen} 
           setShowModal={setIsOpen}
           >
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            <div>
                <h2 className="text-lg/7 font-medium tracking-tight text-gray-950">
                    New Event Category
                </h2>
                <p className="text-sm/6 text-gray-600">
                    Create a new category to organize your events.
                </p>
            </div>

            <div className="space-y-5">
             <div>
               <Label htmlFor="name">Name</Label>
               <Input 
               autoFocus 
               id="name" 
               {...register("name")} 
               placeholder="e.g. user-signup"
               className="w-full"
               />
                {errors.name ?  (
                    <p className="mt-1 text-sm text-red-500">
                    {errors.name.message}
                    </p>
                ) : null}
             </div>

             <div>
                <Label>Color</Label>
                <div className="flex flex-wrap gap-3">
                    {COLOR_OPTIONS.map((premadeColor) => (
                        <button 
                        key={premadeColor}
                        type="button"
                        className={cn(
                            `bg-[${premadeColor}] `, 
                            "size-10 rounded-full ring-2 ring-offset-2 transition-all", 
                            color === premadeColor 
                            ? "ring-brand-700 scale-110" 
                            : "ring-transparent hover:scale-105"
                        )}
                        onClick={() => setValue("color", premadeColor)}
                        ></button>
                    ))}
               </div>

               {errors.color ? ( 
                  <p className="mt-1 text-sm text-red-500">
                {errors.color.message}               {/* Le champ "color" est utilis√© pour s√©lectionner une couleur pour la cat√©gorie d'√©v√©nement. Il affiche des boutons de couleur pr√©d√©finis et permet √† l'utilisateur de choisir une couleur. Si une erreur de validation se produit, elle sera affich√©e sous le champ. */}
               </p>
             ) : null}
             </div>

             <div>
                <Label>Emoji</Label>
                <div className="flex flex-wrap gap-3">
                    {EMOJI_OPTIONS.map(({emoji, label}) => (
                     <button 
                        key={emoji}
                        type="button"
                        className={cn(
                            "size-10 flex items-center justify-center text-xl rounded-md transition-all", 
                            selectedEmoji === emoji
                            ? "bg-brand-100 ring-2 ring-brand-700 scale-110" 
                            : "bg-brand-100 hover:bg-brand-200"
                        )}
                        onClick={() => setValue("emoji", emoji)}
                        >
                        {emoji}
                        </button>
                    ))}
               </div>

               {errors.emoji ? ( 
                  <p className="mt-1 text-sm text-red-500">
                {errors.emoji.message}               {/* Le champ "color" est utilis√© pour s√©lectionner une couleur pour la cat√©gorie d'√©v√©nement. Il affiche des boutons de couleur pr√©d√©finis et permet √† l'utilisateur de choisir une couleur. Si une erreur de validation se produit, elle sera affich√©e sous le champ. */}
               </p>
             ) : null}
             </div>
            </div>

            <div className="flex justify-end space-x-3 pt-4 border-t">
                <Button 
                type="button" 
                variant="outline" 
                onClick={() => setIsOpen(false)}
                >
                  Cancel
                </Button>
                <Button disabled={isPending} type="submit">
                    {isPending ? "Creating..." : "Create Category"}{" "}
                </Button>
            </div>
        </form>
    </Modal>
    </>
    )
}